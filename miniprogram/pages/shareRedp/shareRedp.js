"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../utils/util");
const app = getApp();
Page({
    data: {
        renderOver: false,
    },
    share: util_1.throttle(() => {
        console.log("share");
    }, 1000),
    setNewRedp: util_1.throttle(() => {
        wx.reLaunch({
            url: "/pages/index/index",
        });
    }, 1000),
    test() {
        const that = this;
        if (!that.data.userInfo)
            return;
        wx.navigateTo({
            url: `/receiveRedp/receiveRedp?question=${that.data.question}&quesList=${that.data.quesList}&nickName=${that.data.userInfo.nickname}&avaUrl=${that.data.userInfo.avatarUrl}&redid=${that.data.redid}&activeType=${that.data.activeType}&actionType=${that.data.actionType}`,
            fail(err) {
                console.log(err);
            },
        });
    },
    onLoad: function (options) {
        console.log(options);
        const that = this;
        that.setData({
            userInfo: {
                nickname: options.nickName,
                avatarUrl: options.avaUrl,
            },
            question: options.question,
            quesList: options.quesList,
            activeType: parseInt(options.activeType),
            actionType: !options.actionType
                ? undefined
                : parseInt(options.actionType),
            type: app.globalData.typeList[parseInt(options.activeType)],
            redid: parseInt(options.redid),
        });
        wx.getSystemInfo({
            success(res) {
                that.setData({
                    pixelRatio: res.pixelRatio,
                    width: 285 * res.pixelRatio,
                    height: 400 * res.pixelRatio,
                });
            },
        });
        wx.showShareMenu({
            withShareTicket: true,
            menus: ["shareAppMessage"],
        });
    },
    onImgOK(e) {
        console.log(e.detail.path);
        this.setData({
            imgurl: e.detail.path,
        });
    },
    onImgErr(err) {
        console.log(err);
        wx.showToast({
            title: "生成失败",
            icon: "none",
        });
    },
    onReady() {
        return __awaiter(this, void 0, void 0, function* () { });
    },
    onShow: function () { },
    onHide: function () { },
    onShareAppMessage: function (res) {
        const that = this;
        if (res.from === "button")
            console.log(res.target);
        return {
            title: "转发红包",
            query: {
                activeType: that.data.activeType,
            },
            imageUrl: "/images/share/zhuan.png",
            path: `/receiveRedp/receiveRedp?question=${that.data.question}&quesList=${that.data.quesList}&nickName=${that.data.userInfo.nickname}&avaUrl=${that.data.userInfo.avatarUrl}&redid=${that.data.redid}&activeType=${that.data.activeType}&actionType=${that.data.actionType}`,
            success: (res) => console.log("转发成功:" + JSON.stringify(res)),
            fail: (res) => console.log("转发失败:" + JSON.stringify(res)),
        };
    },
});
//# sourceMappingURL=data:application/json;base64,