"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_js_1 = require("../../utils/request/api.js");
const request_1 = require("../../utils/request/request");
const util_1 = require("../../utils/util");
const app = getApp();
Page({
    data: {
        active: 0,
        moneySend: 0,
        numberSend: 0,
        moneyReceive: 0,
        numberReceive: 0,
        hasRecInfo: false,
        hasSendInfo: false,
    },
    switchTab(e) {
        const that = this;
        this.setData({
            active: parseInt(e.target.dataset.id),
        });
        if (e.target.dataset.id == 1 && !that.data.hasRecInfo) {
            that.getRecInfo();
        }
        else if (e.target.dataset.id == 0 && !that.data.hasSendInfo) {
            that.getSendInfo();
        }
    },
    change(e) {
        const that = this;
        that.setData({
            active: e.detail.current,
        });
        if (e.detail.current == 1 && !that.data.hasRecInfo) {
            that.getRecInfo();
        }
        else if (e.detail.current == 0 && !that.data.hasSendInfo) {
            that.getSendInfo();
        }
    },
    getRecInfo() {
        const that = this;
        request_1.post(api_js_1.recInfo, {
            sessionid: app.globalData.sessionid,
        })
            .then((res) => {
            console.log(res);
            let data = res.data;
            that.setData({
                numberReceive: data.total_num,
                moneyReceive: util_1.formatMoney(data.total_money),
                receiveList: data.packet_list.map((v) => Object.assign(v, {
                    money: util_1.formatMoney(v.money),
                })),
                hasRecInfo: true,
            });
        })
            .catch((err) => console.log(err));
    },
    getSendInfo() {
        const that = this;
        request_1.post(api_js_1.sendInfo, {
            sessionid: app.globalData.sessionid,
        })
            .then((res) => {
            console.log(res);
            let data = res.data;
            that.setData({
                numberSend: data.total_num,
                moneySend: util_1.formatMoney(data.total_money),
                sendList: data.packet_list.map((v) => Object.assign(v, {
                    total_money: util_1.formatMoney(v.total_money),
                })),
                hasSendInfo: true,
            });
        })
            .catch((err) => console.log(err));
    },
    onLoad: function () {
        const that = this;
        console.log(app.globalData.userInfo.avatarUrl);
        that.setData({
            avatarUrl: app.globalData.userInfo.avatarUrl,
            nickname: app.globalData.userInfo.nickName,
        });
        wx.hideShareMenu({
            menus: ["shareAppMessage", "shareTimeline"],
        });
        that.getSendInfo();
        that.getRecInfo();
    },
    onReady: function () { },
    onShow: function () { },
    onHide: function () { },
    onUnload: function () { },
    onPullDownRefresh: function () { },
    onReachBottom: function () { },
});
//# sourceMappingURL=data:application/json;base64,