"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_js_1 = require("../../utils/request/api.js");
const request_js_1 = require("../../utils/request/request.js");
const util_js_1 = require("../../utils/util.js");
const faceBusiness_1 = require("./model/faceBusiness");
let count = 0;
const speedMaxCount = 30;
const STAY_TIME = 1000;
const isReserveDraw = false;
const canvasId = "canvas1";
const app = getApp();
let wrongTime = 0;
let pageThis;
Page({
    data: {
        titleText: "开心",
        buttonText: ["识别中...", "领取红包"],
        state: 0,
        maxWrongTime: 2,
        ModelsReady: false,
    },
    submit: util_js_1.onetap(function () {
        return new Promise((resolve, reject) => {
            const that = pageThis;
            if (that.data.state == 0) {
                reject("状态错误");
                return;
            }
            else {
                request_js_1.post(api_js_1.receive, {
                    sessionid: app.globalData.sessionid,
                    redid: that.data.redid,
                })
                    .then((res) => {
                    console.log(res);
                    let nowTime = new Date().getTime();
                    let spendTime = parseFloat(((nowTime - that.data.startTime) / 1000).toFixed(1));
                    util_js_1.handleReceive(res.data, that, resolve, reject, 1, spendTime);
                })
                    .catch((err) => {
                    console.log(err);
                    wx.showToast({
                        title: "领取失败",
                        icon: "none",
                    });
                });
            }
        });
    }),
    takePhoto() {
        const that = this;
        that.data.canvasThat.data.listener.stop();
        if (that.data.state == 0) {
            that.setData({
                state: 1,
            });
            setTimeout(() => {
                that.submit();
            }, STAY_TIME);
        }
    },
    setWrongTimeto0() {
        wrongTime = 0;
        this.setData({
            wrongTime: 0,
        });
    },
    getCanvasThat(res) {
        this.setData({
            canvasThat: res.detail.that,
            camera: res.detail.camera,
        });
    },
    handleFrame(res) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.data.ModelsReady)
                return;
            const that = this;
            const frame = res.detail.frame;
            if (count < speedMaxCount) {
                count++;
                return;
            }
            count = 0;
            const theFrame = {
                data: new Uint8ClampedArray(frame.data),
                width: frame.width,
                height: frame.height,
            };
            const question = that.data.titleText;
            console.log("题目是" + question);
            let result = yield faceBusiness_1.detect(theFrame, frame.width, frame.height, question);
            if (result) {
                that.takePhoto();
            }
            else {
                wrongTime++;
                console.log(wrongTime);
                if (wrongTime === that.data.maxWrongTime) {
                    that.setData({
                        wrongTime: that.data.maxWrongTime,
                    });
                }
            }
        });
    },
    onLoad(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const that = this;
            pageThis = that;
            that.setData({
                nickname: options.nickname,
                titleText: options.question,
                redid: parseInt(options.redid),
                avatarUrl: options.avatarUrl,
                startTime: new Date().getTime(),
            });
            wx.showLoading({
                title: "Loading...",
            });
            yield faceBusiness_1.loadmodel(canvasId, isReserveDraw);
            wx.hideLoading();
            that.setData({
                ModelsReady: true,
            });
        });
    },
    onReady: function () {
        wx.hideShareMenu({
            menus: ["shareAppMessage", "shareTimeline"],
        });
    },
    onShow: function () { },
    onHide: function () { },
    onUnload: function () {
        const that = this;
        let listener = that.data.canvasThat.data.listener;
        if (listener)
            listener.stop();
    },
});
//# sourceMappingURL=data:application/json;base64,