"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_js_1 = require("../../utils/request/api.js");
const request_js_1 = require("../../utils/request/request.js");
const util_js_1 = require("../../utils/util.js");
const model_1 = require("./model/model");
const app = getApp();
let pageThis;
let prevPoint = [-1, -1];
let pointRecord = [];
Page({
    data: {
        resultText: [
            "......",
            "识别中...",
            "识别不了，再试试吧~",
            "你画出来了，真棒~",
        ],
        state: 0,
        canGetMoney: false,
        closeCanvas: true,
        picInfo: null,
    },
    touchStart: function (e) {
        if (this.data.closeCanvas)
            return;
        const that = this;
        let { x, y } = e.touches[0];
        let tempPoint = pointRecord;
        tempPoint.push({ x, y });
        prevPoint = [x, y];
        pointRecord = tempPoint;
        that.setData({ state: 1 });
    },
    touchMove: function (e) {
        const that = this;
        if (that.data.closeCanvas)
            return;
        let x = e.touches[0].x, y = e.touches[0].y;
        const PP = prevPoint;
        this.canvas.beginPath();
        this.canvas.moveTo(PP[0], PP[1]);
        this.canvas.lineTo(x, y);
        this.canvas.stroke();
        this.canvas.closePath();
        this.canvas.draw(true);
        let tempPoint = pointRecord;
        tempPoint.push({ x, y });
        prevPoint = [x, y];
        pointRecord = tempPoint;
    },
    drawEnd() {
        const that = this;
        const PIC = model_1.getPicBox(pointRecord);
        this.setData({ picInfo: PIC }, () => {
            model_1.judgeByModels(PIC, that)
                .then((myanswer) => {
                that.judgeResult(myanswer);
            })
                .catch((err) => console.log(err));
        });
    },
    clearCanvas: function () {
        let that = this;
        if (that.data.closeCanvas)
            return;
        console.log("clearSketcher");
        pointRecord = [];
        this.canvas = wx.createCanvasContext("canvas");
        this.canvas.fillStyle = "#FFFFFF";
        this.canvas.fillRect(0, 0, this.data.canvasw, this.data.canvash);
        this.canvas.draw();
        this.canvas.lineWidth = 4 * app.globalData.baseLengthRatio;
    },
    judgeResult: function (resText) {
        const that = this;
        console.log("正确答案是：" + that.data.titleText);
        if (resText.includes(that.data.titleText)) {
            that.setData({
                closeCanvas: true,
                state: 3,
            });
        }
        else {
            console.log("你画的好像是：“" + resText + "”哦");
            this.setData({
                state: 2,
            });
        }
    },
    submit: util_js_1.onetap(function () {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const that = pageThis;
                if (that.data.closeCanvas && that.data.state == 3) {
                    try {
                        let res1 = yield request_js_1.post(api_js_1.receive, {
                            sessionid: app.globalData.sessionid,
                            redid: parseInt(that.data.redid),
                        });
                        console.log(res1);
                        let nowTime = new Date().getTime();
                        let spendTime = parseFloat(((nowTime - that.data.startTime) / 1000).toFixed(1));
                        util_js_1.handleReceive(res1.data, that, resolve, reject, 0, spendTime);
                    }
                    catch (err) {
                        console.log(err);
                        wx.showToast({
                            title: "领取失败",
                            icon: "none",
                        });
                    }
                }
            }));
        });
    }),
    onLoad: function (options) {
        console.log(options);
        const that = this;
        pageThis = that;
        wx.getSystemInfo({
            success: function (res) {
                console.log("system init");
                let canvasw = res.windowWidth;
                let canvash = res.windowHeight * 0.54;
                console.log(canvasw, canvash);
                that.setData({
                    canvasw: canvasw,
                    canvash: canvash,
                });
            },
        });
        that.setData({
            titleText: options.question,
            redid: parseInt(options.redid),
            avatarUrl: options.avatarUrl,
            nickname: options.nickname,
        });
        wx.hideShareMenu({
            menus: ["shareAppMessage", "shareTimeline"],
        });
    },
    onReady() {
        return __awaiter(this, void 0, void 0, function* () {
            const that = this;
            this.canvas = wx.createCanvasContext("canvas");
            this.canvas.fillStyle = "#FFFFFF";
            this.canvas.fillRect(0, 0, that.data.canvasw, that.data.canvash);
            this.canvas.lineWidth = 4 * app.globalData.baseLengthRatio;
            this.canvas.strokeStyle = "#000000";
            this.canvas.lineCap = "round";
            if (!app.globalData.canvasModel) {
                wx.showLoading({
                    title: "模型加载中..",
                });
            }
            else {
                that.setData({ closeCanvas: false });
            }
            model_1.getLabels().then((res) => that.setData({ labels: res }));
            that.setData({ startTime: new Date().getTime() });
        });
    },
});
//# sourceMappingURL=data:application/json;base64,