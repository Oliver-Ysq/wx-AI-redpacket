"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_js_1 = require("../../utils/request/api.js");
const request_js_1 = require("../../utils/request/request.js");
const util_js_1 = require("../../utils/util.js");
const STAY_TIME = 1000;
const app = getApp();
let counter = 0;
let wrongTime = 0;
let pageThis;
Page({
    classifier: null,
    ctx: null,
    data: {
        titleText: "——",
        currentLevel: 0,
        bottomText: ["挑战中...", "挑战成功进入下一关"],
        levelMap: ["第一关", "第二关", "第三关"],
        state: 0,
        predicting: false,
        maxWrongTime: 5,
    },
    httpReceive(that, resolve, reject) {
        const _that = this;
        request_js_1.post(api_js_1.receive, {
            sessionid: app.globalData.sessionid,
            redid: parseInt(that.data.redid),
        })
            .then((res) => {
            let nowTime = new Date().getTime();
            let spendTime = parseFloat(((nowTime - _that.data.startTime) / 1000).toFixed(1));
            util_js_1.handleReceive(res.data, _that, resolve, reject, 3, spendTime);
        })
            .catch((err) => {
            reject("领取失败，网络错误");
            console.log(err);
            wx.showToast({
                title: "领取失败",
                icon: "none",
            });
        });
    },
    submit: util_js_1.onetap(function () {
        return new Promise((resolve, reject) => {
            const that = pageThis;
            if (that.data.state == 0) {
                reject("状态错误");
                return;
            }
            else {
                console.log(that.data.currentLevel);
                if (that.data.currentLevel >= 2)
                    that.httpReceive(that, resolve, reject);
                else {
                    wx.redirectTo({
                        url: `./action?quesList=${JSON.stringify(that.data.quesList)}&nickname=${that.data.nickname}&avatarUrl=${that.data.avatarUrl}&redid=${that.data.redid}&level=${that.data.currentLevel + 1}&actionType=${that.data.actionType}&startTime=${that.data.startTime}`,
                        success: () => {
                            resolve("进入下一关");
                            counter = 0;
                            wrongTime = 0;
                        },
                        fail: () => reject("失败"),
                    });
                }
            }
        });
    }),
    takePhoto() {
        const that = this;
        that.data.canvasThat.data.listener.stop();
        if (that.data.state == 0) {
            that.setData({
                state: 1,
            }, () => setTimeout(() => {
                that.submit();
            }, STAY_TIME));
        }
    },
    getCanvasThat(res) {
        this.setData({
            canvasThat: res.detail.that,
            camera: res.detail.camera,
        });
    },
    handleFrame(res) {
        const frame = res.detail.frame;
        counter++;
        if (counter === 5) {
            if (app.globalData.actionModel.isReady()) {
                this.executeClassify(frame);
            }
            counter = 0;
        }
    },
    initClassifier() {
        console.log(app.globalData.actionModel);
        if (!app.globalData.actionModel.ready) {
            wx.showLoading({
                title: "模型加载中..",
            });
        }
    },
    setWrongTimeto0() {
        wrongTime = 0;
        this.setData({
            wrongTime: 0,
        });
    },
    executeClassify(frame) {
        const that = this;
        if (app.globalData.actionModel &&
            app.globalData.actionModel.isReady() &&
            !that.data.predicting) {
            that.setData({
                predicting: true,
            }, () => {
                app.globalData.actionModel
                    .detectFace(frame)
                    .then((face) => {
                    app.globalData.actionModel
                        .getAnswer(face, that.data.titleText)
                        .then(() => {
                        that.takePhoto();
                    })
                        .catch(() => {
                        wrongTime++;
                        console.log(wrongTime);
                        if (wrongTime === that.data.maxWrongTime) {
                            that.setData({
                                wrongTime: that.data.maxWrongTime,
                            });
                        }
                    });
                    that.setData({
                        predicting: false,
                    });
                })
                    .catch((err) => console.log(err, err.stack));
            });
        }
    },
    onLoad: function (options) {
        const that = this;
        pageThis = that;
        let quesList = JSON.parse(options.quesList);
        console.log(quesList);
        that.setData({
            currentLevel: parseInt(options.level) || 0,
            nickname: options.nickname,
            titleText: quesList[options.level || 0],
            quesList: quesList,
            actionType: parseInt(options.actionType),
            avatarUrl: options.avatarUrl,
            redid: parseInt(options.redid),
            startTime: parseFloat(options.startTime) || new Date().getTime(),
        }, () => {
            if (that.data.currentLevel >= 2)
                that.setData({
                    bottomText: ["识别中...", "挑战成功"],
                });
        });
        wx.hideShareMenu({
            menus: ["shareAppMessage", "shareTimeline"],
        });
    },
    onReady: function () {
        this.initClassifier();
    },
    onShow: function () { },
    onHide: function () { },
    onUnload: function () { },
    onReachBottom: function () { },
});
//# sourceMappingURL=data:application/json;base64,