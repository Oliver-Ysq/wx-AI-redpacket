"use strict";
var fetchWechat = require("fetch-wechat");
var tf = require("@tensorflow/tfjs-core");
var plugin = requirePlugin("tfjsPlugin");
var webgl = require("@tensorflow/tfjs-backend-webgl");
var cpu = require("@tensorflow/tfjs-backend-cpu");
App({
    globalData: {
        Width: 320,
        Height: 500,
        benchmarkLevel: -1,
        baseLengthRatio: 1,
        localStorageIO: plugin.localStorageIO,
        fileStorageIO: plugin.fileStorageIO,
        activeType: 0,
        typeList: ["画图", "表情", "识物", "动作"],
        baseUrl: "https://mp.weixin.qq.com/airedpacket",
        canvasModel: null,
        actionModel: null,
    },
    login() {
        const that = this;
        return new Promise((resolve, reject) => {
            wx.login({
                success: (res) => {
                    wx.request({
                        url: "https://mp.weixin.qq.com/airedpacket/action?action=login",
                        method: "POST",
                        header: {
                            "content-type": "application/json; charset=UTF-8",
                        },
                        data: { code: res.code },
                        success(res) {
                            console.log(res.data);
                            that.globalData.sessionid = res.data.session_id;
                            resolve(that.globalData.sessionid);
                        },
                        fail(err) {
                            console.log("app login 获取失败");
                            reject(err);
                        },
                    });
                },
                fail(err) {
                    console.log(err, "wx.login 获取失败");
                },
            });
        });
    },
    getuserinfo() {
        return new Promise((resolve, reject) => {
            const that = this;
            wx.getSetting({
                success: (res) => {
                    if (res.authSetting["scope.userInfo"]) {
                        wx.getUserInfo({
                            success: (res) => {
                                that.globalData.userInfo = res.userInfo;
                                resolve(res.userInfo);
                            },
                        });
                    }
                    else
                        reject();
                },
            });
        });
    },
    downLoadFile(url, key) {
        if (!!wx.getStorageSync(key))
            return;
        wx.downloadFile({
            url,
            success: (res) => {
                if (res.statusCode === 200) {
                    const fs = wx.getFileSystemManager();
                    fs.saveFile({
                        tempFilePath: res.tempFilePath,
                        success(res) {
                            console.log("缓存成功", res.savedFilePath);
                            wx.setStorageSync(key, res.savedFilePath);
                        },
                    });
                }
                else
                    console.log("响应失败", res.statusCode);
            },
            fail: (err) => console.log("下载失败", err),
        });
    },
    getSessionId() {
        const that = this;
        return new Promise((resolve, reject) => {
            const sessionid = wx.getStorageSync("sessionId");
            if (!sessionid) {
                console.log("sessionid缓存miss");
                this.login().then((res) => {
                    wx.setStorage({
                        key: "sessionId",
                        data: res
                    });
                    that.globalData.sessionid = res;
                    reject(res);
                });
            }
            else {
                console.log("sessionid缓存命中");
                this.globalData.sessionid = sessionid;
                resolve(sessionid);
            }
        });
    },
    getDeviceInfo() {
        try {
            const res = wx.getSystemInfoSync();
            this.globalData.baseLengthRatio =
                Math.min(res.windowHeight, res.windowWidth) / 443;
            this.globalData.appHeight = res.windowHeight;
            this.globalData.appWidth = res.windowWidth;
            this.globalData.Width =
                typeof res.screenWidth === "number" ? res.screenWidth : 320;
            this.globalData.Height =
                typeof res.screenHeight === "number" ? res.screenHeight : 500;
            this.globalData.benchmarkLevel =
                typeof res.benchmarkLevel === "number"
                    ? res.benchmarkLevel
                    : -1;
            wx.reportAnalytics("get_device_info", {
                device_info: JSON.stringify(res),
            });
        }
        catch (e) {
            console.log(e);
        }
    },
    onLaunch() {
        const that = this;
        this.getDeviceInfo();
        plugin.configPlugin({
            fetchFunc: fetchWechat.fetchFunc(),
            tf,
            webgl,
            cpu,
            canvas: wx.createOffscreenCanvas(),
        }, false);
        this.downLoadFile("https://weixinredpacket-1258344707.file.myqcloud.com/mobilenet/static/loginBG.svg", "loginBg");
        this.downLoadFile("https://weixinredpacket-1258344707.file.myqcloud.com/mobilenet/static/draw.svg", "draw_img");
        this.downLoadFile("https://weixinredpacket-1258344707.file.myqcloud.com/mobilenet/static/emotion.svg", "emotion_img");
        this.downLoadFile("https://weixinredpacket-1258344707.file.myqcloud.com/mobilenet/static/scan.svg", "scan_img");
        this.downLoadFile("https://weixinredpacket-1258344707.file.myqcloud.com/mobilenet/static/action.svg", "action_img");
        this.downLoadFile("https://weixinredpacket-1258344707.file.myqcloud.com/mobilenet/static/zhuanfa.svg", "zhuanfa");
        setTimeout(() => {
            setInterval(() => {
                that.login().then(res => {
                    wx.setStorage({
                        key: "sessionId",
                        data: res
                    });
                    that.globalData.sessionid = res;
                });
            }, 25 * 60 * 1000);
        }, 1 * 60 * 1000);
    },
});
//# sourceMappingURL=data:application/json;base64,